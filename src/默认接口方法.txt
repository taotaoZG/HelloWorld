    如前所述，在JDK8之前，接口不能定义任何实现。这意味着在之前所有的Java版本中，接口指定的方法是抽象方法，不包含方法体。这是传统的接口形式，也是前面谈论的形式。JDK8的发布改变了这一点。JDK8
为接口添加了一种新功能，叫做默认方法。默认方法允许为接口方法定义默认实现。换句话说，通过使用默认方法，现在能够为接口方法提供方法体，使其不再是抽象方法。默认方法仍在开发时，也被称为扩展方法。
    开发默认方法的主要动机是提供一种扩展接口的方法，而不破坏现有代码。回忆一下，接口定义的所有方法都必须被实现。在过去，如果为一个使用广泛的接口添加一个新方法，那么由于找不到新方法的实现，现
有代码会被破坏。默认方法解决了这个问题，它提供了一个实现，当没有显示提供其他实现时就将采用这个实现。因此，添加默认方法不会破坏现有代码。
    开发默认方法的另外一个动机是希望在接口中指定本质上可选的方法，根据接口的使用方式选择使用的方法。例如，接口可能定义了操作一系列元素的一组方法。其中一个方法可能品性remove()，用于从系列中
删除元素。然而，如果接口应该同时支持可修改和不可修改的系列，那么remove()本质上就是可选的，因为不可修改的系列不会使用它。过去，实现不可修改系列的类需要定义remove()的一个空实现，即使不需要该
方法。现在，可以在接口中指定remove()的默认实现，让它什么都不做（或者抛出异常）。通过提供这种默认实现，就避免了用于不可修改系列的类必须定义自己的、占位符性质的remove()方法。因此，通过提供默
认实现，接口让类实现的remove()方法变为可选方法。
    需要指出的是，添加默认方法并没有改变接口的关键特征：不能维护状态信息。例如，接口仍然不能有实例变量。因此，接口与类之间决定性的区别是类可以维护状态信息，而接口不可以。另外，仍然不能创建接
口本身的实例。接口必须被类实现。因此，即便从JDK8开始，接口可以定义默认方法，在想要创建实例时，也仍然必须用类来实现接口。
